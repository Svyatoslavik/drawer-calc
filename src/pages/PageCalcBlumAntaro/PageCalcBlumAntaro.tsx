import React, { useContext, useEffect, useState } from 'react';
import styled from 'styled-components';
import { MainLayoutContext } from '../../layouts/MainLayout/MainLayout';

const Title = styled.h1`
  font-size: 1.5em;
  text-align: center;
  color: rgb(219, 112, 147);
`;

const DetailsBlock = styled.div`
    white-space: pre;
    margin-left: 1rem;
    line-height: 1.5;
    font-family: 'Courier New', Courier, monospace;
`;

const DocumentLink = styled.a`
    color: blue;
    display: inline-block;
    padding: 10px;
    text-decoration: none;

    &:hover{
        background-color: rgba(0,0,0,.1);
    }
`;

export function PageCalcBlumAntaro() {
    const layoutCtx = useContext(MainLayoutContext);
    useEffect(() => layoutCtx('Antaro (M)', './tandembox_antaro.pdf'), [layoutCtx]);

    const [width, setWidth] = useState(700 - 36);
    const [nominalLength, setNominalLength] = useState(500);
    const [gapForChipboardEdge, setGapForChipboardEdge] = useState(1); // –∑–∞–∑–æ—Ä –Ω–∞ –∫—Ä–æ–º–∫—É

    const bottomWidth = width - 75 - gapForChipboardEdge; // LW - 75mm
    const bottomLength = nominalLength - 24 - gapForChipboardEdge; // NL - 24mm

    const backWidth = width - 87 - gapForChipboardEdge; // LW - 87mm
    const backHeight = 84 - gapForChipboardEdge; // size M - 84mm

    const detailsTxt =
        `${bottomWidth} x ${bottomLength} - 1—à—Ç` + "\n" +
        `${backWidth} x ${backHeight} - 1—à—Ç` + "\n" +
        "–¢–æ–ª—â–∏–Ω–∞ –î–°–ü: 16–º–º\n" +
        `–ó–∞–∑–æ—Ä –Ω–∞ –∫—Ä–æ–º–∫—É (–ø–æ –≤—Å–µ–º —Ç–æ—Ä—Ü–∞–º –¥–µ—Ç–∞–ª–µ–π): ${gapForChipboardEdge}`;

    return (
        <div>
            <Title>–†–∞—Å—Å—á–µ—Ç —à—É—Ö–ª—è–¥—ã –¥–ª—è Tandembox Antaro Blum (–í—ã—Å–æ—Ç–∞ M 84mm)</Title>

            <DocumentLink href="./tandembox_antaro.pdf" target="_blank">üìù Documentation: Blum Tandembox Antaro</DocumentLink>

            <div>
                <div>
                    –í–Ω—É—Ç—Ä–µ–Ω–Ω—è —à–∏—Ä–∏–Ω–∞ –∫–æ—Ä–ø—É—Å–∞ (—Ç—É–º–±—ã)
                    <input value={width} onInput={(e) => setWidth(parseInt((e.target as any).value))} />
                </div>
                <div>
                    –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ —è—â–∏–∫–∞
                    <input value={nominalLength} onInput={(e) => setNominalLength(parseInt((e.target as any).value))} />
                </div>
                <div>
                    –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –Ω–∞ –∫—Ä–æ–º–∫—É
                    <input value={gapForChipboardEdge} onInput={(e) => setGapForChipboardEdge(parseInt((e.target as any).value))} />
                </div>
            </div>

            <div>
                <h3>–ò—Ç–æ–≥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</h3>
                <div>
                    <h4>
                        –î–Ω–æ
                    </h4>
                    <div>
                        –®–∏—Ä–∏–Ω–∞: {bottomWidth}<br />
                        –î–ª–∏–Ω–Ω–∞: {bottomLength}<br />
                    </div>
                </div>

                <div>
                    <h4>
                        –ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∫–∞
                    </h4>
                    <div>
                        –®–∏—Ä–∏–Ω–∞: {backWidth}<br />
                        –í—ã—Å–æ—Ç–∞: {backHeight}<br />
                    </div>
                </div>
            </div>

            <div>
                <h3>–î–µ—Ç–∞–ª–∏</h3>
                <DetailsBlock>{detailsTxt}</DetailsBlock>
            </div>
        </div>
    );
}
